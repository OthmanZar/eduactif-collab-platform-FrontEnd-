/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProject } from '../fn/project-controller/add-project';
import { AddProject$Params } from '../fn/project-controller/add-project';
import { changeIsOpenOfProject } from '../fn/project-controller/change-is-open-of-project';
import { ChangeIsOpenOfProject$Params } from '../fn/project-controller/change-is-open-of-project';
import { changeVisibilityOfProject } from '../fn/project-controller/change-visibility-of-project';
import { ChangeVisibilityOfProject$Params } from '../fn/project-controller/change-visibility-of-project';
import { deleteProject } from '../fn/project-controller/delete-project';
import { DeleteProject$Params } from '../fn/project-controller/delete-project';
import { getAllProjectsByDomaine } from '../fn/project-controller/get-all-projects-by-domaine';
import { GetAllProjectsByDomaine$Params } from '../fn/project-controller/get-all-projects-by-domaine';
import { getAllProjectsByProfessor } from '../fn/project-controller/get-all-projects-by-professor';
import { GetAllProjectsByProfessor$Params } from '../fn/project-controller/get-all-projects-by-professor';
import { getAllProjectsByStudent } from '../fn/project-controller/get-all-projects-by-student';
import { GetAllProjectsByStudent$Params } from '../fn/project-controller/get-all-projects-by-student';
import { getProjectByName } from '../fn/project-controller/get-project-by-name';
import { GetProjectByName$Params } from '../fn/project-controller/get-project-by-name';
import {NoteToReturn} from "../models/note-to-return";
import {ProjectToReturn} from "../models/ProjectToReturn";
import {getAllProjects, GetAllProjects$Params} from "../fn/project-controller/get-all-projects";
import {GetAllInformations$Params} from "../fn/project-controller/get-all-informations";
import {ProjectToReturnTotal} from "../models/ProjectToReturnTotal";
import { getAllInformations } from '../fn/project-controller/get-all-informations';
import {GetAllDepartments$Params} from "../fn/school-year-controller/get-all-departments";
import {getAllDomaines, GetAllDomaines$Params} from "../fn/project-controller/get-all-domaines";
import {updateProject, UpdateProject$Params} from "../fn/project-controller/update-project";
@Injectable({ providedIn: 'root' })
export class ProjectControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addProject()` */
  static readonly AddProjectPath = '/project';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProject$Response(params: AddProject$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProject(params: AddProject$Params, context?: HttpContext): Observable<string> {
    return this.addProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `changeVisibilityOfProject()` */
  static readonly ChangeVisibilityOfProjectPath = '/project/{name}/visibility';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeVisibilityOfProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeVisibilityOfProject$Response(params: ChangeVisibilityOfProject$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return changeVisibilityOfProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeVisibilityOfProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeVisibilityOfProject(params: ChangeVisibilityOfProject$Params, context?: HttpContext): Observable<{
}> {
    return this.changeVisibilityOfProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `changeIsOpenOfProject()` */
  static readonly ChangeIsOpenOfProjectPath = '/project/{name}/opening';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeIsOpenOfProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeIsOpenOfProject$Response(params: ChangeIsOpenOfProject$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return changeIsOpenOfProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeIsOpenOfProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeIsOpenOfProject(params: ChangeIsOpenOfProject$Params, context?: HttpContext): Observable<{
}> {
    return this.changeIsOpenOfProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllProjectsByStudent()` */
  static readonly GetAllProjectsByStudentPath = '/projects/student/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProjectsByStudent()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjectsByStudent$Response(params: GetAllProjectsByStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProjectToReturnTotal>>> {
    return getAllProjectsByStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProjectsByStudent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjectsByStudent(params: GetAllProjectsByStudent$Params, context?: HttpContext): Observable<Array<ProjectToReturnTotal>> {
    return this.getAllProjectsByStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProjectToReturnTotal>>): Array<ProjectToReturnTotal> => r.body)
    );
  }

  /** Path part for operation `getAllProjectsByProfessor()` */
  static readonly GetAllProjectsByProfessorPath = '/projects/professor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProjectsByProfessor()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjectsByProfessor$Response(params: GetAllProjectsByProfessor$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectToReturnTotal[]>> {
    return getAllProjectsByProfessor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProjectsByProfessor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjectsByProfessor(params: GetAllProjectsByProfessor$Params, context?: HttpContext): Observable<ProjectToReturnTotal[]> {
    return this.getAllProjectsByProfessor$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectToReturnTotal[]>): ProjectToReturnTotal[] => r.body)
    );
  }

  /** Path part for operation `getAllProjectsByDomaine()` */
  static readonly GetAllProjectsByDomainePath = '/projects/domaine/{domaine}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProjectsByDomaine()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjectsByDomaine$Response(params: GetAllProjectsByDomaine$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllProjectsByDomaine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProjectsByDomaine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjectsByDomaine(params: GetAllProjectsByDomaine$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllProjectsByDomaine$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getProjectByName()` */
  static readonly GetProjectByNamePath = '/project/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectByName$Response(params: GetProjectByName$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getProjectByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectByName(params: GetProjectByName$Params, context?: HttpContext): Observable<{
}> {
    return this.getProjectByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteProject()` */
  static readonly DeleteProjectPath = '/project/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProject$Response(params: DeleteProject$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProject(params: DeleteProject$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }



  /** Path part for operation `getAllProjects()` */
  static readonly GetAllProjectsPath = '/projects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjects$Response(params?: GetAllProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProjectToReturn>>> {
    return getAllProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProjects$Response` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjects(params?: GetAllProjects$Params, context?: HttpContext): Observable<Array<ProjectToReturn>> {
    return this.getAllProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProjectToReturn>>): Array<ProjectToReturn> => r.body)
    );
  }

  /** Path part for operation `getAllInformations()` */
  static readonly GetAllInformationsPath = '/project/info/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllInformations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInformations$Response(params: GetAllInformations$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectToReturnTotal>> {
    return getAllInformations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllInformations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInformations(params: GetAllInformations$Params, context?: HttpContext): Observable<ProjectToReturnTotal> {
    return this.getAllInformations$Response(params, context ).pipe(
      map((r: StrictHttpResponse<ProjectToReturnTotal>): ProjectToReturnTotal => r.body)
    );
  }


  /** Path part for operation `getAllDomaines()` */
  static readonly GetAllDomainesPath = '/infos/domaines';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDomaines()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDomaines$Response(params?: GetAllDomaines$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllDomaines(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDomaines$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDomaines(params?: GetAllDomaines$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllDomaines$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }


  /** Path part for operation `changeIsOpenOfProject()` */
  static readonly UpdateProjectPath = '/project/{name}/edit';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeIsOpenOfProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateProject$Response(params: UpdateProject$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return updateProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeIsOpenOfProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateProject(params: UpdateProject$Params, context?: HttpContext): Observable<boolean> {
    return this.updateProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
