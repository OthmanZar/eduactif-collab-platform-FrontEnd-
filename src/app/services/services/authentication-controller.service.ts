/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProfessor } from '../fn/authentication-controller/add-professor';
import { AddProfessor$Params } from '../fn/authentication-controller/add-professor';
import { addStudents } from '../fn/authentication-controller/add-students';
import { AddStudents$Params } from '../fn/authentication-controller/add-students';
import { jwtToken } from '../fn/authentication-controller/jwt-token';
import { JwtToken$Params } from '../fn/authentication-controller/jwt-token';
import { ProfessorToReturn } from '../models/professor-to-return';
import { StudentDtoToReturn } from '../models/student-dto-to-return';
import { Tokens } from '../models/tokens';
import { validateUser } from '../fn/authentication-controller/validate-user';
import { ValidateUser$Params } from '../fn/authentication-controller/validate-user';

@Injectable({ providedIn: 'root' })
export class AuthenticationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `validateUser()` */
  static readonly ValidateUserPath = '/auth/validate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validateUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateUser$Response(params: ValidateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return validateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validateUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateUser(params: ValidateUser$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.validateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `addStudents()` */
  static readonly AddStudentsPath = '/auth/register/student';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addStudents()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addStudents$Response(params: AddStudents$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentDtoToReturn>> {
    return addStudents(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addStudents$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addStudents(params: AddStudents$Params, context?: HttpContext): Observable<StudentDtoToReturn> {
    return this.addStudents$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentDtoToReturn>): StudentDtoToReturn => r.body)
    );
  }

  /** Path part for operation `addProfessor()` */
  static readonly AddProfessorPath = '/auth/register/professor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProfessor()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProfessor$Response(params: AddProfessor$Params, context?: HttpContext): Observable<StrictHttpResponse<ProfessorToReturn>> {
    return addProfessor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProfessor$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProfessor(params: AddProfessor$Params, context?: HttpContext): Observable<ProfessorToReturn> {
    return this.addProfessor$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProfessorToReturn>): ProfessorToReturn => r.body)
    );
  }

  /** Path part for operation `jwtToken()` */
  static readonly JwtTokenPath = '/auth/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `jwtToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  jwtToken$Response(params: JwtToken$Params, context?: HttpContext): Observable<StrictHttpResponse<Tokens>> {
    return jwtToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `jwtToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  jwtToken(params: JwtToken$Params, context?: HttpContext): Observable<Tokens> {
    return this.jwtToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<Tokens>): Tokens => r.body)
    );
  }

}
