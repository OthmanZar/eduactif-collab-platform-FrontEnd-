/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRequest } from '../fn/request-controller/add-request';
import { AddRequest$Params } from '../fn/request-controller/add-request';
import { changeState } from '../fn/request-controller/change-state';
import { ChangeState$Params } from '../fn/request-controller/change-state';
import { getAllRequest } from '../fn/request-controller/get-all-request';
import { GetAllRequest$Params } from '../fn/request-controller/get-all-request';
import { getAllRequestsWithAState } from '../fn/request-controller/get-all-requests-with-a-state';
import { GetAllRequestsWithAState$Params } from '../fn/request-controller/get-all-requests-with-a-state';
import { getRequestsOfAnUser } from '../fn/request-controller/get-requests-of-an-user';
import { GetRequestsOfAnUser$Params } from '../fn/request-controller/get-requests-of-an-user';
import { getRequestsOfAProject } from '../fn/request-controller/get-requests-of-a-project';
import { GetRequestsOfAProject$Params } from '../fn/request-controller/get-requests-of-a-project';
import {RequestToReturn} from "../models/request-to-return";

@Injectable({ providedIn: 'root' })
export class RequestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addRequest()` */
  static readonly AddRequestPath = '/request';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRequest$Response(params: AddRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<RequestToReturn>> {
    return addRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRequest(params: AddRequest$Params, context?: HttpContext): Observable<RequestToReturn> {
    return this.addRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<RequestToReturn>): RequestToReturn => r.body)
    );
  }

  /** Path part for operation `changeState()` */
  static readonly ChangeStatePath = '/request/state';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeState()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeState$Response(params: ChangeState$Params, context?: HttpContext): Observable<StrictHttpResponse<RequestToReturn>> {
    return changeState(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeState$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeState(params: ChangeState$Params, context?: HttpContext): Observable<RequestToReturn> {
    return this.changeState$Response(params, context).pipe(
      map((r: StrictHttpResponse<RequestToReturn>): RequestToReturn => r.body)
    );
  }

  /** Path part for operation `getAllRequest()` */
  static readonly GetAllRequestPath = '/requests';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRequest$Response(params?: GetAllRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRequest(params?: GetAllRequest$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getRequestsOfAnUser()` */
  static readonly GetRequestsOfAnUserPath = '/requests/user/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRequestsOfAnUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRequestsOfAnUser$Response(params: GetRequestsOfAnUser$Params, context?: HttpContext): Observable<StrictHttpResponse<RequestToReturn[]>> {
    return getRequestsOfAnUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRequestsOfAnUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRequestsOfAnUser(params: GetRequestsOfAnUser$Params, context?: HttpContext): Observable<RequestToReturn[]> {
    return this.getRequestsOfAnUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<RequestToReturn[]>): RequestToReturn[] => r.body)
    );
  }

  /** Path part for operation `getAllRequestsWithAState()` */
  static readonly GetAllRequestsWithAStatePath = '/requests/state/{state}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRequestsWithAState()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRequestsWithAState$Response(params: GetAllRequestsWithAState$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllRequestsWithAState(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRequestsWithAState$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRequestsWithAState(params: GetAllRequestsWithAState$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllRequestsWithAState$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getRequestsOfAProject()` */
  static readonly GetRequestsOfAProjectPath = '/requests/project/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRequestsOfAProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRequestsOfAProject$Response(params: GetRequestsOfAProject$Params, context?: HttpContext): Observable<StrictHttpResponse<RequestToReturn[]>> {
    return getRequestsOfAProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRequestsOfAProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRequestsOfAProject(params: GetRequestsOfAProject$Params, context?: HttpContext): Observable<RequestToReturn[]> {
    return this.getRequestsOfAProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<RequestToReturn[]>): RequestToReturn[] => r.body)
    );
  }

}
