/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCoursesToSchoolYear } from '../fn/school-year-controller/add-courses-to-school-year';
import { AddCoursesToSchoolYear$Params } from '../fn/school-year-controller/add-courses-to-school-year';
import { addSchoolYear } from '../fn/school-year-controller/add-school-year';
import { AddSchoolYear$Params } from '../fn/school-year-controller/add-school-year';
import { getAllCoursesOfSchoolYear } from '../fn/school-year-controller/get-all-courses-of-school-year';
import { GetAllCoursesOfSchoolYear$Params } from '../fn/school-year-controller/get-all-courses-of-school-year';
import { getAllDepartments } from '../fn/school-year-controller/get-all-departments';
import { GetAllDepartments$Params } from '../fn/school-year-controller/get-all-departments';
import { getAllProfessors } from '../fn/school-year-controller/get-all-professors';
import { GetAllProfessors$Params } from '../fn/school-year-controller/get-all-professors';
import { getAllSchoolYearsByDepartment } from '../fn/school-year-controller/get-all-school-years-by-department';
import { GetAllSchoolYearsByDepartment$Params } from '../fn/school-year-controller/get-all-school-years-by-department';
import { getAllSchoolYearsByType } from '../fn/school-year-controller/get-all-school-years-by-type';
import { GetAllSchoolYearsByType$Params } from '../fn/school-year-controller/get-all-school-years-by-type';
import { getAllStudents1 } from '../fn/school-year-controller/get-all-students-1';
import { GetAllStudents1$Params } from '../fn/school-year-controller/get-all-students-1';
import { getAllTypes } from '../fn/school-year-controller/get-all-types';
import { GetAllTypes$Params } from '../fn/school-year-controller/get-all-types';
import { getSchoolYear } from '../fn/school-year-controller/get-school-year';
import { GetSchoolYear$Params } from '../fn/school-year-controller/get-school-year';
import { ProfessorToReturn } from '../models/professor-to-return';
import { SchoolYearToReturn } from '../models/school-year-to-return';
import {StudentDtoToReturnSmall} from "../models/student-dto-to-small-return";

@Injectable({ providedIn: 'root' })
export class SchoolYearControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addSchoolYear()` */
  static readonly AddSchoolYearPath = '/schoolYear';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSchoolYear()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSchoolYear$Response(params: AddSchoolYear$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addSchoolYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSchoolYear$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSchoolYear(params: AddSchoolYear$Params, context?: HttpContext): Observable<string> {
    return this.addSchoolYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addCoursesToSchoolYear()` */
  static readonly AddCoursesToSchoolYearPath = '/schoolYear/cours';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCoursesToSchoolYear()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCoursesToSchoolYear$Response(params: AddCoursesToSchoolYear$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return addCoursesToSchoolYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCoursesToSchoolYear$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCoursesToSchoolYear(params: AddCoursesToSchoolYear$Params, context?: HttpContext): Observable<boolean> {
    return this.addCoursesToSchoolYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getAllStudents1()` */
  static readonly GetAllStudents1Path = '/schoolYear/{name}/students';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllStudents1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStudents1$Response(params: GetAllStudents1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StudentDtoToReturnSmall>>> {
    return getAllStudents1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllStudents1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStudents1(params: GetAllStudents1$Params, context?: HttpContext): Observable<Array<StudentDtoToReturnSmall>> {
    return this.getAllStudents1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StudentDtoToReturnSmall>>): Array<StudentDtoToReturnSmall> => r.body)
    );
  }

  /** Path part for operation `getAllProfessors()` */
  static readonly GetAllProfessorsPath = '/schoolYear/{name}/professors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProfessors()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProfessors$Response(params: GetAllProfessors$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProfessorToReturn>>> {
    return getAllProfessors(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProfessors$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProfessors(params: GetAllProfessors$Params, context?: HttpContext): Observable<Array<ProfessorToReturn>> {
    return this.getAllProfessors$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProfessorToReturn>>): Array<ProfessorToReturn> => r.body)
    );
  }

  /** Path part for operation `getSchoolYear()` */
  static readonly GetSchoolYearPath = '/infos/schoolYear/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSchoolYear()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSchoolYear$Response(params: GetSchoolYear$Params, context?: HttpContext): Observable<StrictHttpResponse<SchoolYearToReturn>> {
    return getSchoolYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSchoolYear$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSchoolYear(params: GetSchoolYear$Params, context?: HttpContext): Observable<SchoolYearToReturn> {
    return this.getSchoolYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<SchoolYearToReturn>): SchoolYearToReturn => r.body)
    );
  }

  /** Path part for operation `getAllCoursesOfSchoolYear()` */
  static readonly GetAllCoursesOfSchoolYearPath = '/infos/schoolYear/{name}/courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCoursesOfSchoolYear()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCoursesOfSchoolYear$Response(params: GetAllCoursesOfSchoolYear$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllCoursesOfSchoolYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCoursesOfSchoolYear$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCoursesOfSchoolYear(params: GetAllCoursesOfSchoolYear$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllCoursesOfSchoolYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getAllSchoolYearsByType()` */
  static readonly GetAllSchoolYearsByTypePath = '/infos/schoolYear/Type/{type}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSchoolYearsByType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSchoolYearsByType$Response(params: GetAllSchoolYearsByType$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllSchoolYearsByType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSchoolYearsByType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSchoolYearsByType(params: GetAllSchoolYearsByType$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllSchoolYearsByType$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getAllSchoolYearsByDepartment()` */
  static readonly GetAllSchoolYearsByDepartmentPath = '/infos/schoolYear/Department/{department}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSchoolYearsByDepartment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSchoolYearsByDepartment$Response(params: GetAllSchoolYearsByDepartment$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllSchoolYearsByDepartment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSchoolYearsByDepartment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSchoolYearsByDepartment(params: GetAllSchoolYearsByDepartment$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllSchoolYearsByDepartment$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getAllTypes()` */
  static readonly GetAllTypesPath = '/infos/Types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTypes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTypes$Response(params?: GetAllTypes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllTypes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTypes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTypes(params?: GetAllTypes$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllTypes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getAllDepartments()` */
  static readonly GetAllDepartmentsPath = '/infos/Departments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDepartments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDepartments$Response(params?: GetAllDepartments$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllDepartments(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDepartments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDepartments(params?: GetAllDepartments$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllDepartments$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

}
