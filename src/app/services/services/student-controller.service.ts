/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteStudent } from '../fn/student-controller/delete-student';
import { DeleteStudent$Params } from '../fn/student-controller/delete-student';
import { getAllCours } from '../fn/student-controller/get-all-cours';
import { GetAllCours$Params } from '../fn/student-controller/get-all-cours';
import { getAllNotes } from '../fn/student-controller/get-all-notes';
import { GetAllNotes$Params } from '../fn/student-controller/get-all-notes';
import { getAllStudents } from '../fn/student-controller/get-all-students';
import { GetAllStudents$Params } from '../fn/student-controller/get-all-students';
import { getHistory } from '../fn/student-controller/get-history';
import { GetHistory$Params } from '../fn/student-controller/get-history';
import { getStudentByEmail } from '../fn/student-controller/get-student-by-email';
import { GetStudentByEmail$Params } from '../fn/student-controller/get-student-by-email';
import { getStudentById } from '../fn/student-controller/get-student-by-id';
import { GetStudentById$Params } from '../fn/student-controller/get-student-by-id';
import { HistoryToReturn } from '../models/history-to-return';
import { NoteToReturn } from '../models/note-to-return';
import { StudentDtoToReturn } from '../models/student-dto-to-return';
import {StudentDtoToReturnSmall} from "../models/student-dto-to-small-return";
import {getStudentByEmailSmall} from "../fn/student-controller/get-student-by-email-small";

@Injectable({ providedIn: 'root' })
export class StudentControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllStudents()` */
  static readonly GetAllStudentsPath = '/students';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllStudents()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStudents$Response(params?: GetAllStudents$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StudentDtoToReturn>>> {
    return getAllStudents(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllStudents$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStudents(params?: GetAllStudents$Params, context?: HttpContext): Observable<Array<StudentDtoToReturn>> {
    return this.getAllStudents$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StudentDtoToReturn>>): Array<StudentDtoToReturn> => r.body)
    );
  }

  /** Path part for operation `getStudentById()` */
  static readonly GetStudentByIdPath = '/students/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStudentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudentById$Response(params: GetStudentById$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentDtoToReturn>> {
    return getStudentById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStudentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudentById(params: GetStudentById$Params, context?: HttpContext): Observable<StudentDtoToReturn> {
    return this.getStudentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentDtoToReturn>): StudentDtoToReturn => r.body)
    );
  }

  /** Path part for operation `deleteStudent()` */
  static readonly DeleteStudentPath = '/students/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStudent()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStudent$Response(params: DeleteStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStudent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStudent(params: DeleteStudent$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getAllNotes()` */
  static readonly GetAllNotesPath = '/students/{id}/notes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllNotes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNotes$Response(params: GetAllNotes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NoteToReturn>>> {
    return getAllNotes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllNotes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNotes(params: GetAllNotes$Params, context?: HttpContext): Observable<Array<NoteToReturn>> {
    return this.getAllNotes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NoteToReturn>>): Array<NoteToReturn> => r.body)
    );
  }

  /** Path part for operation `getAllCours()` */
  static readonly GetAllCoursPath = '/students/{id}/courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCours()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCours$Response(params: GetAllCours$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllCours(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCours$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCours(params: GetAllCours$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllCours$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getHistory()` */
  static readonly GetHistoryPath = '/students/{email}/history';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistory$Response(params: GetHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HistoryToReturn>>> {
    return getHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistory(params: GetHistory$Params, context?: HttpContext): Observable<Array<HistoryToReturn>> {
    return this.getHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HistoryToReturn>>): Array<HistoryToReturn> => r.body)
    );
  }

  /** Path part for operation `getStudentByEmail()` */
  static readonly GetStudentByEmailPath = '/students/email/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStudentByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudentByEmail$Response(params: GetStudentByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentDtoToReturn>> {
    return getStudentByEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStudentByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudentByEmail(params: GetStudentByEmail$Params, context?: HttpContext): Observable<StudentDtoToReturn> {
    return this.getStudentByEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentDtoToReturn>): StudentDtoToReturn => r.body)
    );
  }



  /** Path part for operation `getStudentByEmailSmall()` */
  static readonly GetStudentByEmailSmallPath = '/students/necessary/email/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStudentByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudentByEmailSmall$Response(params: GetStudentByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentDtoToReturnSmall>> {
    return getStudentByEmailSmall(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStudentByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudentByEmailSmall(params: GetStudentByEmail$Params, context?: HttpContext): Observable<StudentDtoToReturnSmall> {
    return this.getStudentByEmailSmall$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentDtoToReturnSmall>): StudentDtoToReturnSmall => r.body)
    );
  }

}
