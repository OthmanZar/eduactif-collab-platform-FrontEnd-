/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addAdmin } from '../fn/administrator-controller/add-admin';
import { AddAdmin$Params } from '../fn/administrator-controller/add-admin';
import { changeStudentState } from '../fn/administrator-controller/change-student-state';
import { ChangeStudentState$Params } from '../fn/administrator-controller/change-student-state';
import { sendValidationCode } from '../fn/administrator-controller/send-validation-code';
import { SendValidationCode$Params } from '../fn/administrator-controller/send-validation-code';

@Injectable({ providedIn: 'root' })
export class AdministratorControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addAdmin()` */
  static readonly AddAdminPath = '/admin/admin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addAdmin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addAdmin$Response(params: AddAdmin$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addAdmin(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addAdmin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addAdmin(params: AddAdmin$Params, context?: HttpContext): Observable<string> {
    return this.addAdmin$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `changeStudentState()` */
  static readonly ChangeStudentStatePath = '/admin/student/state';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeStudentState()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeStudentState$Response(params: ChangeStudentState$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return changeStudentState(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeStudentState$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeStudentState(params: ChangeStudentState$Params, context?: HttpContext): Observable<string> {
    return this.changeStudentState$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `sendValidationCode()` */
  static readonly SendValidationCodePath = '/admin/activation-code';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendValidationCode()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendValidationCode$Response(params: SendValidationCode$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return sendValidationCode(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendValidationCode$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendValidationCode(params: SendValidationCode$Params, context?: HttpContext): Observable<boolean> {
    return this.sendValidationCode$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
