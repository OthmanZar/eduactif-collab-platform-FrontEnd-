/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addEvaluation } from '../fn/evaluation-controller/add-evaluation';
import { AddEvaluation$Params } from '../fn/evaluation-controller/add-evaluation';
import { EvaluationToReturn } from '../models/evaluation-to-return';
import { getAllEvaluationsOfProject } from '../fn/evaluation-controller/get-all-evaluations-of-project';
import { GetAllEvaluationsOfProject$Params } from '../fn/evaluation-controller/get-all-evaluations-of-project';
import { getAllEvaluationsOfProjectAdesc } from '../fn/evaluation-controller/get-all-evaluations-of-project-adesc';
import { GetAllEvaluationsOfProjectAdesc$Params } from '../fn/evaluation-controller/get-all-evaluations-of-project-adesc';
import { getAllEvaluationsOfProjectAsc } from '../fn/evaluation-controller/get-all-evaluations-of-project-asc';
import { GetAllEvaluationsOfProjectAsc$Params } from '../fn/evaluation-controller/get-all-evaluations-of-project-asc';
import { getTheMoyenneEvaluationsOfProject } from '../fn/evaluation-controller/get-the-moyenne-evaluations-of-project';
import { GetTheMoyenneEvaluationsOfProject$Params } from '../fn/evaluation-controller/get-the-moyenne-evaluations-of-project';

@Injectable({ providedIn: 'root' })
export class EvaluationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addEvaluation()` */
  static readonly AddEvaluationPath = '/evaluation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addEvaluation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addEvaluation$Response(params: AddEvaluation$Params, context?: HttpContext): Observable<StrictHttpResponse<EvaluationToReturn>> {
    return addEvaluation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addEvaluation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addEvaluation(params: AddEvaluation$Params, context?: HttpContext): Observable<EvaluationToReturn> {
    return this.addEvaluation$Response(params, context).pipe(
      map((r: StrictHttpResponse<EvaluationToReturn>): EvaluationToReturn => r.body)
    );
  }

  /** Path part for operation `getAllEvaluationsOfProject()` */
  static readonly GetAllEvaluationsOfProjectPath = '/evaluations/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllEvaluationsOfProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEvaluationsOfProject$Response(params: GetAllEvaluationsOfProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EvaluationToReturn>>> {
    return getAllEvaluationsOfProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllEvaluationsOfProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEvaluationsOfProject(params: GetAllEvaluationsOfProject$Params, context?: HttpContext): Observable<Array<EvaluationToReturn>> {
    return this.getAllEvaluationsOfProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EvaluationToReturn>>): Array<EvaluationToReturn> => r.body)
    );
  }

  /** Path part for operation `getAllEvaluationsOfProjectAdesc()` */
  static readonly GetAllEvaluationsOfProjectAdescPath = '/evaluations/{name}/order/DESC';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllEvaluationsOfProjectAdesc()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEvaluationsOfProjectAdesc$Response(params: GetAllEvaluationsOfProjectAdesc$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EvaluationToReturn>>> {
    return getAllEvaluationsOfProjectAdesc(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllEvaluationsOfProjectAdesc$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEvaluationsOfProjectAdesc(params: GetAllEvaluationsOfProjectAdesc$Params, context?: HttpContext): Observable<Array<EvaluationToReturn>> {
    return this.getAllEvaluationsOfProjectAdesc$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EvaluationToReturn>>): Array<EvaluationToReturn> => r.body)
    );
  }

  /** Path part for operation `getAllEvaluationsOfProjectAsc()` */
  static readonly GetAllEvaluationsOfProjectAscPath = '/evaluations/{name}/order/ASC';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllEvaluationsOfProjectAsc()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEvaluationsOfProjectAsc$Response(params: GetAllEvaluationsOfProjectAsc$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EvaluationToReturn>>> {
    return getAllEvaluationsOfProjectAsc(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllEvaluationsOfProjectAsc$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEvaluationsOfProjectAsc(params: GetAllEvaluationsOfProjectAsc$Params, context?: HttpContext): Observable<Array<EvaluationToReturn>> {
    return this.getAllEvaluationsOfProjectAsc$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EvaluationToReturn>>): Array<EvaluationToReturn> => r.body)
    );
  }

  /** Path part for operation `getTheMoyenneEvaluationsOfProject()` */
  static readonly GetTheMoyenneEvaluationsOfProjectPath = '/evaluations/{name}/mean';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTheMoyenneEvaluationsOfProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTheMoyenneEvaluationsOfProject$Response(params: GetTheMoyenneEvaluationsOfProject$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getTheMoyenneEvaluationsOfProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTheMoyenneEvaluationsOfProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTheMoyenneEvaluationsOfProject(params: GetTheMoyenneEvaluationsOfProject$Params, context?: HttpContext): Observable<number> {
    return this.getTheMoyenneEvaluationsOfProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
